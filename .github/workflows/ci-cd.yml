name: CI & CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-publish:
    name: ðŸš§ Build, Test & Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Validate composer.json
        working-directory: api
        run: composer validate --no-check-publish

      - name: Install API dependencies
        working-directory: api
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: Run PHPUnit
        working-directory: api
        run: vendor/bin/phpunit --testdox

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push API image
        uses: docker/build-push-action@v4
        with:
          context: api
          file: api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mybank-api:latest

      - name: Build & push Front image
        uses: docker/build-push-action@v4
        with:
          context: front
          file: front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mybank-front:latest

          - name: Deploy to VM
          run: |
            ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << 'EOF'
              set -eux
              START=$SECONDS
        
              cd ~/mybank
              export JWT_SECRET="$JWT_SECRET"
              docker-compose pull
              docker-compose up -d
              docker-compose exec -T api php bin/console doctrine:migrations:migrate --no-interaction
        
              DURATION=$(( SECONDS - START ))
              echo ">> DÃ©ploiement + migrations en ${DURATION}s"
            EOF
          shell: bash
          env:
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            VM_HOST:   ${{ secrets.VM_HOST }}
            VM_USER:   ${{ secrets.VM_USER }}
        